#include <vector>
using namespace std;

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        UnionFind uf(n);

        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                if(graph[i][j] == 1)
                    uf.Union(i, j);
            }
        }

        vector<int> count(n);
        for(int v : initial){
            count[uf.root(v)]++;
        }

        int res = initial[0], maxreduction = 0;

        for(int v : initial){
            int red = count[uf.root(v)] == 1 ? uf.size(v) : 0;
            if(red > maxreduction){
                maxreduction = red;
                res = v;
            }
            else if(red == maxreduction)
                res = min(res, v);
        }
        return res;
    }

private:
    class UnionFind{
    public:
        UnionFind(int n) : parent(n), sz(n) {
            for(int i = 0; i < n; i++){
                parent[i] = i;
                sz[i] = 1;
            }
        }

        int root(int v){
            if(parent[v] != v)
                parent[v] = root(parent[v]);
            return parent[v];
        }

        void Union(int u, int v){
            int ru = root(u);
            int rv = root(v);

            if(ru != rv){
                parent[rv] = ru;
                sz[ru] += sz[rv];
            }
        }

        int size(int v){
            return sz[root(v)];
        }
    
    private:
        vector<int> parent, sz;
    };
};