#include <vector>
using namespace std;

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        parent.resize(n);
        for(int i = 0; i < n; i++)
            parent[i] = i;
        sz.resize(n, 1);
        cnt.resize(n);
        vector<bool> init(n);
        for(int v : initial) init[v] = true;

        for(int i = 0; i < n; i++){
            if(init[i]) continue;
            for(int j = i + 1; j < n; j++){
                if(!init[j] && graph[i][j] == 1)
                    combine(i, j);
            }
        }

        vector<vector<bool>> infected(n ,vector<bool>(n, false));

        for(int i = 0; i < n; i++){
            if(!init[i]) continue;
            for(int j = 0; j < n; j++){
                if(!init[j] && graph[i][j] == 1)
                    infected[i][root(j)] = true;
            }

            for(int j = 0; j < n; j++){
                if(infected[i][j]) cnt[j]++;
            }
        }

        int res = initial[0], maxcnt = 0;
        for(int i = 0; i < n; i++){
            if(!init[i]) continue;
            int currcnt = 0;
            for(int j = 0; j < n; j++){
                if(infected[i][j] && cnt[j] == 1)
                    currcnt += sz[j];
            }
            if(currcnt > maxcnt){
                maxcnt = currcnt;
                res = i;
            }
            else if(currcnt == maxcnt)
                res = min(res, i);
        }

        return res;
    }

private:
    vector<int> parent, sz, cnt;

    int root(int v){
        if(parent[v] != v)
            parent[v] = root(parent[v]);
        return parent[v];
    }

    void combine(int u, int v){
        int ru = root(u);
        int rv = root(v);
        if(ru != rv){
            parent[rv] = ru;
            sz[ru] += sz[rv];
        }
    }
};